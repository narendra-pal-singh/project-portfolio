//let deferredPrompt;

//Set this to true for production
var doCache = false;

//Name this pwa cache of the app
var CACHE_NAME = 'payed-cache';

//Delete old cache that are not current one
self.addEventListener("activate", event => {
    const cacheWhiteList = [CACHE_NAME];
    event.waitUntil(
        caches.keys()
        .then(keyList =>
            Promise.all(keyList.map(key => {
                if(!cacheWhiteList.includes(key)){
                    console.log('Deleting cache: '+key);
                    return caches.delete(key);
                }
            })
            )
        )
    );
});

// self.addEventListener('beforeinstallprompt', (e) => {
//     alert('install app');
//     console.log('not install');
//     // Prevent Chrome 67 and earlier from automatically showing the prompt
//     e.preventDefault();
//     // Stash the event so it can be triggered later.
//     deferredPrompt = e;
//     // Update UI to notify the user they can add to home screen
//     addBtn.style.display = 'block';
  
//     addBtn.addEventListener('click', (e) => {
//       // hide our user interface that shows our A2HS button
//       addBtn.style.display = 'none';
//       // Show the prompt
//       deferredPrompt.prompt();
//       // Wait for the user to respond to the prompt
//       deferredPrompt.userChoice.then((choiceResult) => {
//           if (choiceResult.outcome === 'accepted') {
//             console.log('User accepted the A2HS prompt');
//           } else {
//             console.log('User dismissed the A2HS prompt');
//           }
//           deferredPrompt = null;
//         });
//     });
//   });

//Install Trigger for first time user open
self.addEventListener('install',function(event){

    if(doCache){
        event.waitUntil(
            caches.open(CACHE_NAME)
            .then(function(cache){
                //Get the assets manifest so we can see what our js file is named
                //This is because webpack hashes it
                fetch("asset-manifest.json")
                .then(response => {
                    response.json()
                })
                .then(assets => {
                    //Open a cache and cache our files
                    //We want to cache the page and the main.js generated by webpack
                    //We could also cache any static assets like CSS or images
                    const urlsToCache = [
                        "/",
                        assets["main.js"]
                    ]
                    cache.addAll(urlsToCache)
                    console.log('cached');
                })
            })
        )
    }
});

//When the webpage goes to fetch file, we intercept the request and server up the matching files
//if we have them
self.addEventListener('fetch',function(event){
    if(doCache){
        event.respondWith(
            caches.match(event.request).then(function(response){
                return response || fetch(event.request);
            })
        )
    }
});

self.addEventListener('appinstalled', () => {

    //window.resizeTo(375, 712);
    alert('app installed');
    // Hide the app-provided install promotion
    //hideInstallPromotion();
    // Clear the deferredPrompt so it can be garbage collected
    //deferredPrompt = null;
    // Optionally, send analytics event to indicate successful install
    //console.log('PWA was installed');
  });

function getPWADisplayMode() {
    const isStandalone = window.matchMedia('(display-mode: standalone)').matches;
    if (document.referrer.startsWith('android-app://')) {
      return 'twa';
    } else if (navigator.standalone || isStandalone) {
      return 'standalone';
    }
    return 'browser';
}